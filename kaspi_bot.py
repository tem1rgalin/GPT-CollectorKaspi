import telebot
import pytesseract
import cv2
import numpy as np
from PIL import Image
import io
import re


pytesseract.pytesseract.tesseract_cmd = r"D:\Tesseract\tesseract.exe"
TOKEN = "7591267995:AAHiDshjNlPpqbzdKfHlotYzJgw8v10_gys"
bot = telebot.TeleBot(TOKEN)

donations = {}
goal = 10500
pending_check = set()
used_receipts = set()



@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@bot.message_handler(commands=['–¥–æ–Ω–∞—Ç'])
def send_donation_info(message):
    user_id = message.from_user.id
    pending_check.add(user_id)
    bot.reply_to(message,
    "üì§ –ß—Ç–æ–±—ã —Å–∫–∏–Ω—É—Ç—å –Ω–∞ GPT+:\n\n"
    "üí≥ Kaspi Gold: +7 708 24 54 513\n"
    "üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –î–∏–Ω–º—É—Ö–∞–º–º–µ–¥ T.\n\n"
    "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç üì∏\n"
    "–ë–æ—Ç —Å–∞–º —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å—É–º–º—É –∏ –¥–æ–±–∞–≤–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ ‚úÖ")

@bot.message_handler(commands=['—Å–∫–∏–Ω—É–ª'])
def handle_donation(message):
    try:
        parts = message.text.split()
        amount = int(parts[1])
        user = message.from_user.username or message.from_user.first_name

        if user in donations:
            donations[user] += amount
        else:
            donations[user] = amount

        total = sum(donations.values())
        remaining = goal - total

        reply = f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ {amount}‚Ç∏ –æ—Ç {user}!\n–°–æ–±—Ä–∞–Ω–æ: {total}‚Ç∏ / {goal}‚Ç∏"
        if remaining <= 0:
            reply += "\nüéØ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å GPT+ üéâ"
        else:
            reply += f"\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}‚Ç∏"

        bot.reply_to(message, reply)

    except (IndexError, ValueError):
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –≤–æ—Ç —Ç–∞–∫: /—Å–∫–∏–Ω—É–ª 1000")

@bot.message_handler(commands=['—Å—Ç–∞—Ç—É—Å'])
def handle_status(message):
    if not donations:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–∫–∏–¥—ã–≤–∞–ª üò¢")
        return

    lines = ["üí∞ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞:"]
    for user, amount in donations.items():
        lines.append(f"@{user}: {amount}‚Ç∏" if user.startswith('@') else f"{user}: {amount}‚Ç∏")

    total = sum(donations.values())
    remaining = goal - total

    lines.append(f"–°–æ–±—Ä–∞–Ω–æ: {total}‚Ç∏ / {goal}‚Ç∏")
    if remaining > 0:
        lines.append(f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining}‚Ç∏")
    else:
        lines.append("üü¢ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! üéâ")
        lines.append(f"ü™ô –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: {abs(remaining)}‚Ç∏")

    bot.reply_to(message, "\n".join(lines))



@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id not in pending_check:
        return
    else:
        pending_check.remove(user_id) 
    print("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ–∫–∞ –æ—Ç", message.from_user.username)
    print("üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ:", message.photo[-1].file_id)
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        image = Image.open(io.BytesIO(downloaded_file)).convert('RGB')
        open_cv_image = np.array(image)
        open_cv_image = open_cv_image[:, :, ::-1].copy()

        gray = cv2.cvtColor(open_cv_image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 160, 255, cv2.THRESH_BINARY)

        text = pytesseract.image_to_string(thresh, lang='rus+eng')
        print("üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n", text)

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —á–µ–∫
        if not any(word in text.lower() for word in ['–∫–∞—Å–ø–∏', '–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', '–∫–≤–∏—Ç–∞–Ω—Ü–∏—è', 'kaspi']):
            bot.reply_to(message,
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–µ–∫ Kaspi.\n\n"
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç **–ø–æ–ª–Ω–æ–≥–æ —á–µ–∫–∞** –µ—â—ë —Ä–∞–∑.\n"
            "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–∏–¥–Ω–æ:\n"
            "‚Ä¢ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "‚Ä¢ –¥–∞—Ç—É\n"
            "‚Ä¢ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ ‚Äî –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Ç–∞—Ä—ã–π —á–µ–∫."
            )
            pending_check.add(user_id)
            return


        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
        receipt_match = re.search(r'‚Ññ[^\d]*(\d{6,})', text)
        if receipt_match:
            receipt_number = receipt_match.group(1)
            if receipt_number in used_receipts:
                bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª —É—á—Ç—ë–Ω —Ä–∞–Ω–µ–µ.")
                return
            else:
                used_receipts.add(receipt_number)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —á–µ–∫ –ø–æ–ª–Ω—ã–π.")
            return

        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã
        import datetime
        today = datetime.datetime.now().date()
        date_match = re.search(r'(\d{2})\.(\d{2})\.(\d{4}|\d{2})', text)
        if date_match:
            day, month, year = date_match.groups()
            year = int(year)
            year += 2000 if year < 100 else 0
            check_date = datetime.date(year, int(month), int(day))
            delta_days = (today - check_date).days

            if delta_days > 4 or delta_days < 0:
                bot.reply_to(message, f"‚ö†Ô∏è –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–∞—Ç–æ–π ({check_date.strftime('%d.%m.%Y')}). –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —á–µ–∫–∏.")
                return

        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –Ω–∞ —á–µ–∫–µ.")
            return

        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã
        cleaned_text = re.sub(r'(\d)\s+(\d)', r'\1\2', text)
        sum_match = re.search(r'—É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω\s+(\d{3,6})\s*[‚Ç∏—Ç–¢T]', cleaned_text, re.IGNORECASE)
        if sum_match:
            amount_str = sum_match.group(1)
            amount = int(amount_str)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –Ω–∞ —á–µ–∫–µ.")
            return

        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
       
        sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò.–û."
        name_candidates = re.findall(r'([–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.?)', text)

        if name_candidates:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" –∏–ª–∏ "ot"
            for name in name_candidates:
                before_name_index = text.lower().find(name.lower())
                if before_name_index != -1:
                    context = text.lower()[:before_name_index]
                    if any(keyword in context for keyword in ["–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", "ot"]):
                        sender_name = name
                        break

        # –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if sender_name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" and name_candidates:
            sender_name = name_candidates[0]

        print("üîç –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", sender_name)

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–Ω–∞—Ç
        username = message.from_user.username or message.from_user.first_name
        donations[username] = donations.get(username, 0) + amount

        total = sum(donations.values())
        remaining = goal - total

        reply = f"‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {amount}‚Ç∏ –æ—Ç @{username}"
        if sender_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π":
            reply += f" ({sender_name})"
        reply += f"\n–ö–≤–∏—Ç–∞–Ω—Ü–∏—è: {receipt_number}\n"

        reply += f"–°–æ–±—Ä–∞–Ω–æ: {total}‚Ç∏ / {goal}‚Ç∏\n"
        reply += "üéØ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å GPT+ üéâ" if remaining <= 0 else f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining}‚Ç∏"

        bot.reply_to(message, reply)

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞:", e)
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling()
